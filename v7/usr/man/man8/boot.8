.TH BOOT 8
.SH NAME
boot \- startup procedures
.SH DESCRIPTION
A PDP11/45 and PDP11/70 UNIX system is started by
a two-stage process.
The first is a primary bootstrap
which is able to read in relatively small stand-alone programs;
the second (called
.IR boot )
is used to read in the system itself.
.PP
The primary bootstrap must reside
in the otherwise unused block zero of the boot device.
It can be read in and started by the standard ROM
programs,
or if necessary by keying in a small startup routine.
This program is capable of loading type 407 executable
files (not shared, not separate I&D).
The user types on the system console
the name of the program wished, in this case
.IR boot ,
followed by a carriage return;
the named program is retrieved from the file system
that starts at block 0 of drive 0 of the boot device.
No prompt is given,
no diagnostic results if the file cannot be found, and no
provision is made for correcting typographical errors.
.PP
The second step, called
.I boot,
actually brings in the system.
When read into location 0 and executed,
.I boot
sets up memory management, relocates itself into
high memory, and types a `:' on the console.
Then it
reads from the console
a device specification (see below) followed immediately by
a pathname.
.I Boot
finds the corresponding file on the given device,
loads that file into memory location zero,
sets up memory management as required,
and calls the program by executing a `trap' instruction.
Normal
line editing characters can be used.
.PP
Conventionally, the name of the secondary boot program
is `/boot' and the name of the current version of the system
is `/unix'.
Then, the recipe is:
.TP
1)
Load block 0 of the boot device by fiddling with the
console keys as appropriate for your hardware.
If you have no appropriate ROM, some programs suitable
for manual use are given below.
.TP
2)
Type
.IR boot .
.TP
3)
When the prompt is given, type
.br
	hp(0,0)unix
.br
or
.br
	rp(0,0)unix
.br
depending on whether you are loading from an RP04/5/6 or an RP03
respectively.
The first 0 indicates the physical unit number;
the second indicates
the block number of the beginning of the logical file
system to be searched.
(See below).
.PP
When the system is running, it types a `#' prompt.
After doing any file system checks and setting the date
.RI ( date (8))
a multi-user system is brought up by typing an EOT
(control-d)
in response to the `#' prompt.
.PP
.B Device specifications.
A device specification has the following form:
.IP " "
device(unit,offset)
.LP
where
.I device
is the type of the device to be searched,
.I unit
is the unit number of the device,
and 
.I offset
is the block offset of the file system on the device.
.I Device
is one of the following
.br
.nf
	rp	RP03
	hp	RP04/5/6
	rk	RK05
.fi
For example, the specification
.IP " "
hp(1,7000)
.LP
indicates an RP03 disk, unit 1, and the file system found
starting at block 7000 (cylinder 35).
.PP
.SM
.B ROM
.B programs.
The following programs to call the primary bootstrap
may be installed in read-only memories
or manually keyed into main 
memory.
Each program is position-independent
but should be placed well above location 0
so it will not be overwritten.
Each reads a block from the
beginning of a device into core location
zero.
The octal words constituting the program are
listed on the left.
.PP
.ne 5
.nf
.if n .ta 3 11 15 23 38
.if t .ta .3i 1i 1.4i 2i 3.5i
RK (drive 0):
	012700		mov	$rkda,r0
	177412
	005040		clr	\-(r0)	/ rkda cleared by start
	010040		mov	r0,\-(r0)
	012740		mov	$5,\-(r0)
	000005
	105710	1:	tstb	(r0)
	002376		bge	1b
	005007		clr	pc
.PP
.ne 11
RP (drive 0)
	012700		mov	$rpmr,r0
	176726
	005040		clr	\-(r0)
	005040		clr	\-(r0)
	005040		clr	\-(r0)
	010040		mov	r0,\-(r0)
	012740		mov	$5,\-(r0)
	000005
	105710	1:	tstb	(r0)
	002376		bge	1b
	005007		clr	pc
.DT
.SH FILES
/unix \- system code
.br
/usr/mdec/rpuboot, /usr/mdec/hpuboot \- copies of primary bootstrap
.br
/boot \- second stage bootstrap
.SH "SEE ALSO"
init(8)
